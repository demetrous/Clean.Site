@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.HomePage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@{
	Layout = null;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
	integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

<h1>Bootstrap test</h1>

<nav id="navbar-example2" class="navbar bg-light px-3 mb-3">
	<a class="navbar-brand" href="#">Navbar</a>
	<ul class="nav nav-pills">
		<li class="nav-item">
			<a class="nav-link" href="#scrollspyHeading1">First</a>
		</li>
		<li class="nav-item">
			<a class="nav-link" href="#scrollspyHeading2">Second</a>
		</li>
		<li class="nav-item dropdown">
			<a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" href="#" role="button"
				aria-expanded="false">Dropdown</a>
			<ul class="dropdown-menu">
				<li><a class="dropdown-item" href="#scrollspyHeading3">Third</a></li>
				<li><a class="dropdown-item" href="#scrollspyHeading4">Fourth</a></li>
				<li>
					<hr class="dropdown-divider">
				</li>
				<li><a class="dropdown-item" href="#scrollspyHeading5">Fifth</a></li>
			</ul>
		</li>
	</ul>
</nav>
<div data-bs-spy="scroll" data-bs-target="#navbar-example2" data-bs-root-margin="0px 0px -40%"
	data-bs-smooth-scroll="true" class="scrollspy-example bg-light p-3 rounded-2" tabindex="0">
	<h4 id="scrollspyHeading1">First heading</h4>
	<p>This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate
		navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example
		copy here to emphasize the scrolling and highlighting.</p>
	<h4 id="scrollspyHeading2">Second heading</h4>
	<p>This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate
		navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example
		copy here to emphasize the scrolling and highlighting.</p>
	<h4 id="scrollspyHeading3">Third heading</h4>
	<p>This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate
		navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example
		copy here to emphasize the scrolling and highlighting.</p>
	<h4 id="scrollspyHeading4">Fourth heading</h4>
	<p>This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate
		navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example
		copy here to emphasize the scrolling and highlighting another word.</p>
	<h4 id="scrollspyHeading5">Fifth heading</h4>
	<p>This is some placeholder content for the scrollspy page. Note that as you scroll down the page, the appropriate
		navigation link is highlighted. It's repeated throughout the component example. We keep adding some more example
		copy here to emphasize the scrolling and highlighting.</p>
</div>

<div class="form-floating mb-3">
	<input type="email" class="form-control" id="floatingInput" placeholder="name@example.com">
	<label for="floatingInput">Email address</label>
</div>
<div class="form-floating">
	<input type="password" class="form-control" id="floatingPassword" placeholder="Password">
	<label for="floatingPassword">Password</label>
</div>

<!-- Large button groups (default and split) -->
<div class="btn-group">
	<button class="btn btn-secondary btn-lg dropdown-toggle" type="button" data-bs-toggle="dropdown"
		aria-expanded="false">
		Large button
	</button>
	<ul class="dropdown-menu">
		...
	</ul>
</div>
<div class="btn-group">
	<button class="btn btn-secondary btn-lg" type="button">
		Large split button
	</button>
	<button type="button" class="btn btn-lg btn-secondary dropdown-toggle dropdown-toggle-split"
		data-bs-toggle="dropdown" aria-expanded="false">
		<span class="visually-hidden">Toggle Dropdown</span>
	</button>
	<ul class="dropdown-menu">
		...
	</ul>
</div>

<table class="table table-success table-striped">
	<thead>
		<tr>
			<th scope="col">#</th>
			<th scope="col">First</th>
			<th scope="col">Last</th>
			<th scope="col">Handle</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<th scope="row">1</th>
			<td>Mark</td>
			<td>Otto</td>
			<td>@@mdo</td>
		</tr>
		<tr>
			<th scope="row">2</th>
			<td>Jacob</td>
			<td>Thornton</td>
			<td>@@fat</td>
		</tr>
		<tr>
			<th scope="row">3</th>
			<td colspan="2">Larry the Bird</td>
			<td>@@twitter</td>
		</tr>
	</tbody>
</table>

<div class="accordion" id="accordionExample">
	<div class="accordion-item">
		<h2 class="accordion-header" id="headingOne">
			<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne"
				aria-expanded="true" aria-controls="collapseOne">
				Accordion Item #1
			</button>
		</h2>
		<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne"
			data-bs-parent="#accordionExample">
			<div class="accordion-body">
				<strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse
				plugin adds the appropriate classes that we use to style each element. These classes control the overall
				appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with
				custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go
				within the <code>.accordion-body</code>, though the transition does limit overflow.
			</div>
		</div>
	</div>
	<div class="accordion-item">
		<h2 class="accordion-header" id="headingTwo">
			<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
				data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
				Accordion Item #2
			</button>
		</h2>
		<div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo"
			data-bs-parent="#accordionExample">
			<div class="accordion-body">
				<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse
				plugin adds the appropriate classes that we use to style each element. These classes control the overall
				appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with
				custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go
				within the <code>.accordion-body</code>, though the transition does limit overflow.
			</div>
		</div>
	</div>
	<div class="accordion-item">
		<h2 class="accordion-header" id="headingThree">
			<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
				data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
				Accordion Item #3
			</button>
		</h2>
		<div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="headingThree"
			data-bs-parent="#accordionExample">
			<div class="accordion-body">
				<strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse
				plugin adds the appropriate classes that we use to style each element. These classes control the overall
				appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with
				custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go
				within the <code>.accordion-body</code>, though the transition does limit overflow.
			</div>
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
	integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4"
	crossorigin="anonymous"></script>